## DEFAULT SETTINGS ARE NOT MEANT TO BE TAKEN STRAIGHT INTO PRODUCTION
## see https://www.rabbitmq.com/configure.html for further information
## on configuring RabbitMQ

## allow access to the guest user from anywhere on the network
## https://www.rabbitmq.com/access-control.html#loopback-users
## https://www.rabbitmq.com/production-checklist.html#users
loopback_users.guest = false

## Service access (Internal)
listeners.tcp.2 = :::${SMQ_SERVICE_RABBITMQ_PORT}
# Service access (Internal)
listeners.ssl.2 = ${SMQ_SERVICE_RABBITMQ_TLS_PORT}

# SuperMQ Clients access (Public)
listeners.ssl.1 = ${SMQ_RABBITMQ_AMQP_TLS_PORT}
## SuperMQ Clients access (Public)
listeners.tcp.1 = :::${SMQ_RABBITMQ_AMQP_PORT}


auth_mechanisms.1 = PLAIN
auth_mechanisms.2 = AMQPLAIN
auth_mechanisms.3 = SUPERMQ_MTLS


ssl_options.cacertfile = /etc/rabbitmq/ssl/ca.crt
ssl_options.certfile   = /etc/rabbitmq/ssl/server.crt
ssl_options.keyfile    = /etc/rabbitmq/ssl/server.key
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = false

## External Auth Mechanisms options https://github.com/rabbitmq/rabbitmq-server/blob/main/deps/rabbitmq_auth_mechanism_ssl/README.md
## Subject Alternative Name
## To extract username from a Subject Alternative Name (SAN) field, a few settings need to be configured. Since a certificate can have more than one SAN field and they can represent identities of different types, the type and the index of the field to use must be provided.
## For example, to use the first SAN value of type DNS:
# ssl_cert_login_from      = subject_alternative_name
# ssl_cert_login_san_type  = dns
# ssl_cert_login_san_index = 0
## Or of type email:
# ssl_cert_login_from      = subject_alternative_name
# ssl_cert_login_san_type  = email
# ssl_cert_login_san_index = 0
## Common Name
## To use the Common Name instead, set rabbit.ssl_cert_login_from to common_name:
ssl_cert_login_from = common_name


## Send all logs to stdout/TTY. Necessary to see logs when running via
## a container
log.console = true
log.console.level = debug
# log.console.formatter = json

## Enable anonymous connection
mqtt.allow_anonymous = false
mqtt.listeners.tcp.1 = ${SMQ_RABBITMQ_MQTT_PORT}
mqtt.listeners.ssl.1 = ${SMQ_RABBITMQ_MQTT_TLS_PORT}
mqtt.ssl_cert_login = true

web_mqtt.ws_path = ${SMQ_RABBITMQ_MQTT_WS_PATH}

## Enable this it is behind the Proxy and enable proxy protocol in proxy
web_mqtt.proxy_protocol = false

web_mqtt.tcp.port = ${SMQ_RABBITMQ_MQTT_WS_PORT}
web_mqtt.ssl.port       = ${SMQ_RABBITMQ_MQTT_WSS_PORT}
web_mqtt.ssl.backlog    = 1024
web_mqtt.ssl.cacertfile = /etc/rabbitmq/ssl/ca.crt
web_mqtt.ssl.certfile   = /etc/rabbitmq/ssl/server.crt
web_mqtt.ssl.keyfile    = /etc/rabbitmq/ssl/server.key
## Not support in web_mqtt
# web_mqtt.ssl.verify         = verify_peer
# web_mqtt.ssl.fail_if_no_peer_cert = false



# enable the http backend as the auth backend
auth_backends.1 = rabbitmq_auth_backend_supermq

smq.grpc.auth.host = ${SMQ_AUTH_GRPC_HOST}
smq.grpc.auth.port = ${SMQ_AUTH_GRPC_PORT}
smq.grpc.clients.host = ${SMQ_CLIENTS_GRPC_HOST}
smq.grpc.clients.port = ${SMQ_CLIENTS_GRPC_PORT}
smq.grpc.channels.host = ${SMQ_CHANNELS_GRPC_HOST}
smq.grpc.channels.port = ${SMQ_CHANNELS_GRPC_PORT}

http_dispatch.auth_backends.1 = internal
management.tcp.port = ${SMQ_RABBITMQ_MANAGEMENT_HTTP_PORT}

# Example configurations
# rabbitmq_auth_backend_supermq.internal_ip_ports = 127.0.0.1:5672, any:5673, 1.0.0.1:any, any:any
rabbitmq_auth_backend_supermq.internal_ip_ports = any:${SMQ_SERVICE_RABBITMQ_PORT}, any:${SMQ_SERVICE_RABBITMQ_TLS_PORT}
